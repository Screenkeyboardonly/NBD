import scala.annotation.tailrec


object Assignment2 {
  def main(args: Array[String]) {

    val days = List("Monday", "Tuesday", "Wednesday", "Sunday", "Saturday", "Thursday", "Friday")

    def task1(list: List[String]): Unit = {

      def checkDay(dayName: String): String = {
        dayName match {

          case "Saturday" | "Sunday" => "weekend"
          case _ => "work"
        }
      }

      list.foreach(day => println(checkDay(day)))
    }

    def task2(): Unit = {

      class BankAccount(private var currentBalance: Double) {

        def this() {
          this(0);
        }

        def deposit(earn: Double) {
          currentBalance += earn;
        }
        def withdraw(pay: Double) {
          currentBalance -= pay;
        }
      }

    }

    def task3(): Unit = {

      class Person(val firstName: String, val lastName: String) {

      }

      val Person1 = new Person("Mary", "Watson")
      val Person2 = new Person("Steven", "Seagull")
      val Person3 = new Person("Wesley", "Sniper")

      def Hello(person: Person): String = {
        person.firstName match {
          case "Mary" => "Oh, hello there!"
          case "Steven" => "Top of the morning to ya."
          case "Wesley" => "I've got my sight on you."
        }
      }

      println(Hello(Person1))
      println(Hello(Person2))
      println(Hello(Person3))
    }


    def task4(): Unit = {
      def functionOnInts(value: Int, callback: Int => Int): Int = {
        callback(callback(callback(value)))
      }

      println(functionOnInts(3, (value: Int) => value * 20))
    }

    def task5(): Unit = {

      trait Employee extends Person {
        var salary: Double;



        override def taxToPay(): Double = {
          return salary * 0.2;
        }

      }

      class Person (val firstName: String, val lastName: String, private val _taxToPay: Double) {
        def taxToPay = _taxToPay;
      }

      trait Student extends Person {
        override def taxToPay(): Double = {
          return 0.0;
        }

      }

      trait Teacher extends Employee {
        override def taxToPay(): Double = {
          return salary * 0.1;
        }
      }


      val employee1 = new Person("Mary", "Watson", 0) with Employee {
        override var salary: Double = 10000;
      }
      val employee2 = new Person("Steven", "Seagull", 0) with Teacher {
        override var salary: Double = 10000;
      }
      val Student1 = new Person("Wesley", "Sniper", 0) with Student {

      };
      val StudentEmp = new Person("Robert", "Plant", 0) with Employee with Student {
        override var salary: Double = 10000;
      };
      val EmpStudent = new Person("Samuel El", "Headson", 0) with Student with Employee {
        override var salary: Double = 10000;
      };
      
      println("emp pays tax of: " + employee1.taxToPay())
      println("teacher pays tax of: " + employee2.taxToPay())
      println("Student pays tax of: " + Student1.taxToPay())
      println("StudentEmp pays tax of: " + StudentEmp.taxToPay())
      println("EmpStudent pays tax of: " + EmpStudent.taxToPay())

    }


    task1(days)
    task2()
    task3()
    task4()
    task5()

  }
}
